
004_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003208  08003208  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003208  08003208  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003208  08003208  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800320c  0800320c  0001320c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000010  08003220  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003220  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7f1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bea  00000000  00000000  0002b82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002d418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179cf  00000000  00000000  0002eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c475  00000000  00000000  000464cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0a9  00000000  00000000  00052944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc9ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003154  00000000  00000000  000dca40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080031c8 	.word	0x080031c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080031c8 	.word	0x080031c8

0800014c <Init_Driver>:
	short _ticks_to_next = 0;
	short _options = 0;


void Init_Driver(short step_resolution)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	switch (step_resolution)
 8000156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800015a:	3b01      	subs	r3, #1
 800015c:	2b04      	cmp	r3, #4
 800015e:	f200 8090 	bhi.w	8000282 <Init_Driver+0x136>
 8000162:	a201      	add	r2, pc, #4	; (adr r2, 8000168 <Init_Driver+0x1c>)
 8000164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000168:	0800017d 	.word	0x0800017d
 800016c:	080001b1 	.word	0x080001b1
 8000170:	080001e5 	.word	0x080001e5
 8000174:	08000219 	.word	0x08000219
 8000178:	0800024d 	.word	0x0800024d
	{
		case 1:
			HAL_GPIO_WritePin(GPIOB, MS1_Pin, GPIO_PIN_RESET);
 800017c:	2200      	movs	r2, #0
 800017e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000182:	4852      	ldr	r0, [pc, #328]	; (80002cc <Init_Driver+0x180>)
 8000184:	f001 f86c 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800018e:	484f      	ldr	r0, [pc, #316]	; (80002cc <Init_Driver+0x180>)
 8000190:	f001 f866 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS3_Pin, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019a:	484c      	ldr	r0, [pc, #304]	; (80002cc <Init_Driver+0x180>)
 800019c:	f001 f860 	bl	8001260 <HAL_GPIO_WritePin>
			_ticks_to_next = 13;
 80001a0:	4b4b      	ldr	r3, [pc, #300]	; (80002d0 <Init_Driver+0x184>)
 80001a2:	220d      	movs	r2, #13
 80001a4:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fd2d 	bl	8000c08 <HAL_Delay>
			break;
 80001ae:	e082      	b.n	80002b6 <Init_Driver+0x16a>

		case 2:
			HAL_GPIO_WritePin(GPIOB, MS1_Pin, GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001b6:	4845      	ldr	r0, [pc, #276]	; (80002cc <Init_Driver+0x180>)
 80001b8:	f001 f852 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c2:	4842      	ldr	r0, [pc, #264]	; (80002cc <Init_Driver+0x180>)
 80001c4:	f001 f84c 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS3_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	483f      	ldr	r0, [pc, #252]	; (80002cc <Init_Driver+0x180>)
 80001d0:	f001 f846 	bl	8001260 <HAL_GPIO_WritePin>
			_ticks_to_next = 50;
 80001d4:	4b3e      	ldr	r3, [pc, #248]	; (80002d0 <Init_Driver+0x184>)
 80001d6:	2232      	movs	r2, #50	; 0x32
 80001d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1000);
 80001da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001de:	f000 fd13 	bl	8000c08 <HAL_Delay>
			break;
 80001e2:	e068      	b.n	80002b6 <Init_Driver+0x16a>

		case 3:
			HAL_GPIO_WritePin(GPIOB, MS1_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ea:	4838      	ldr	r0, [pc, #224]	; (80002cc <Init_Driver+0x180>)
 80001ec:	f001 f838 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f6:	4835      	ldr	r0, [pc, #212]	; (80002cc <Init_Driver+0x180>)
 80001f8:	f001 f832 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS3_Pin, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4832      	ldr	r0, [pc, #200]	; (80002cc <Init_Driver+0x180>)
 8000204:	f001 f82c 	bl	8001260 <HAL_GPIO_WritePin>
			_ticks_to_next = 100;
 8000208:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <Init_Driver+0x184>)
 800020a:	2264      	movs	r2, #100	; 0x64
 800020c:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1000);
 800020e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000212:	f000 fcf9 	bl	8000c08 <HAL_Delay>
			break;
 8000216:	e04e      	b.n	80002b6 <Init_Driver+0x16a>

		case 4:
			HAL_GPIO_WritePin(GPIOB, MS1_Pin, GPIO_PIN_SET);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800021e:	482b      	ldr	r0, [pc, #172]	; (80002cc <Init_Driver+0x180>)
 8000220:	f001 f81e 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022a:	4828      	ldr	r0, [pc, #160]	; (80002cc <Init_Driver+0x180>)
 800022c:	f001 f818 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS3_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000236:	4825      	ldr	r0, [pc, #148]	; (80002cc <Init_Driver+0x180>)
 8000238:	f001 f812 	bl	8001260 <HAL_GPIO_WritePin>
			_ticks_to_next = 200;
 800023c:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <Init_Driver+0x184>)
 800023e:	22c8      	movs	r2, #200	; 0xc8
 8000240:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 fcdf 	bl	8000c08 <HAL_Delay>
			break;
 800024a:	e034      	b.n	80002b6 <Init_Driver+0x16a>

		case 5:
			HAL_GPIO_WritePin(GPIOB, MS1_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000252:	481e      	ldr	r0, [pc, #120]	; (80002cc <Init_Driver+0x180>)
 8000254:	f001 f804 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025e:	481b      	ldr	r0, [pc, #108]	; (80002cc <Init_Driver+0x180>)
 8000260:	f000 fffe 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS3_Pin, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800026a:	4818      	ldr	r0, [pc, #96]	; (80002cc <Init_Driver+0x180>)
 800026c:	f000 fff8 	bl	8001260 <HAL_GPIO_WritePin>
			_ticks_to_next = 400;
 8000270:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <Init_Driver+0x184>)
 8000272:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000276:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1000);
 8000278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800027c:	f000 fcc4 	bl	8000c08 <HAL_Delay>
			break;
 8000280:	e019      	b.n	80002b6 <Init_Driver+0x16a>

		default:
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000288:	4810      	ldr	r0, [pc, #64]	; (80002cc <Init_Driver+0x180>)
 800028a:	f000 ffe9 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS2_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <Init_Driver+0x180>)
 8000296:	f000 ffe3 	bl	8001260 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, MS3_Pin, GPIO_PIN_RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a0:	480a      	ldr	r0, [pc, #40]	; (80002cc <Init_Driver+0x180>)
 80002a2:	f000 ffdd 	bl	8001260 <HAL_GPIO_WritePin>
			_ticks_to_next = 50;
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <Init_Driver+0x184>)
 80002a8:	2232      	movs	r2, #50	; 0x32
 80002aa:	801a      	strh	r2, [r3, #0]
			HAL_Delay(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b0:	f000 fcaa 	bl	8000c08 <HAL_Delay>
			break;
 80002b4:	bf00      	nop

	}
	HAL_GPIO_WritePin(GPIOB, ENABLE_Pin, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002bc:	4803      	ldr	r0, [pc, #12]	; (80002cc <Init_Driver+0x180>)
 80002be:	f000 ffcf 	bl	8001260 <HAL_GPIO_WritePin>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010c00 	.word	0x40010c00
 80002d0:	20000032 	.word	0x20000032

080002d4 <Change_position>:

void Change_position(short position)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]
	_counter = 0;
 80002de:	4b47      	ldr	r3, [pc, #284]	; (80003fc <Change_position+0x128>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
	_next_position = position;
 80002e4:	4a46      	ldr	r2, [pc, #280]	; (8000400 <Change_position+0x12c>)
 80002e6:	88fb      	ldrh	r3, [r7, #6]
 80002e8:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOB, ENABLE_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f0:	4844      	ldr	r0, [pc, #272]	; (8000404 <Change_position+0x130>)
 80002f2:	f000 ffb5 	bl	8001260 <HAL_GPIO_WritePin>
	if (_next_position != _current_position)
 80002f6:	4b42      	ldr	r3, [pc, #264]	; (8000400 <Change_position+0x12c>)
 80002f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80002fc:	4b42      	ldr	r3, [pc, #264]	; (8000408 <Change_position+0x134>)
 80002fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000302:	429a      	cmp	r2, r3
 8000304:	d075      	beq.n	80003f2 <Change_position+0x11e>
	{
		if (_next_position > _current_position)
 8000306:	4b3e      	ldr	r3, [pc, #248]	; (8000400 <Change_position+0x12c>)
 8000308:	f9b3 2000 	ldrsh.w	r2, [r3]
 800030c:	4b3e      	ldr	r3, [pc, #248]	; (8000408 <Change_position+0x134>)
 800030e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000312:	429a      	cmp	r2, r3
 8000314:	dd30      	ble.n	8000378 <Change_position+0xa4>
		{
			if ((_next_position - _current_position) <= 8)
 8000316:	4b3a      	ldr	r3, [pc, #232]	; (8000400 <Change_position+0x12c>)
 8000318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800031c:	461a      	mov	r2, r3
 800031e:	4b3a      	ldr	r3, [pc, #232]	; (8000408 <Change_position+0x134>)
 8000320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000324:	1ad3      	subs	r3, r2, r3
 8000326:	2b08      	cmp	r3, #8
 8000328:	dc12      	bgt.n	8000350 <Change_position+0x7c>
			{
				HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	2108      	movs	r1, #8
 800032e:	4835      	ldr	r0, [pc, #212]	; (8000404 <Change_position+0x130>)
 8000330:	f000 ff96 	bl	8001260 <HAL_GPIO_WritePin>
				_options = (_next_position - _current_position);
 8000334:	4b32      	ldr	r3, [pc, #200]	; (8000400 <Change_position+0x12c>)
 8000336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800033a:	b29a      	uxth	r2, r3
 800033c:	4b32      	ldr	r3, [pc, #200]	; (8000408 <Change_position+0x134>)
 800033e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000342:	b29b      	uxth	r3, r3
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	b29b      	uxth	r3, r3
 8000348:	b21a      	sxth	r2, r3
 800034a:	4b30      	ldr	r3, [pc, #192]	; (800040c <Change_position+0x138>)
 800034c:	801a      	strh	r2, [r3, #0]
 800034e:	e013      	b.n	8000378 <Change_position+0xa4>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2108      	movs	r1, #8
 8000354:	482b      	ldr	r0, [pc, #172]	; (8000404 <Change_position+0x130>)
 8000356:	f000 ff83 	bl	8001260 <HAL_GPIO_WritePin>
				_options = (16 - (_next_position - _current_position));
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <Change_position+0x134>)
 800035c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000360:	b29a      	uxth	r2, r3
 8000362:	4b27      	ldr	r3, [pc, #156]	; (8000400 <Change_position+0x12c>)
 8000364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000368:	b29b      	uxth	r3, r3
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	b29b      	uxth	r3, r3
 800036e:	3310      	adds	r3, #16
 8000370:	b29b      	uxth	r3, r3
 8000372:	b21a      	sxth	r2, r3
 8000374:	4b25      	ldr	r3, [pc, #148]	; (800040c <Change_position+0x138>)
 8000376:	801a      	strh	r2, [r3, #0]
			}
		}
		if (_next_position < _current_position)
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <Change_position+0x12c>)
 800037a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <Change_position+0x134>)
 8000380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000384:	429a      	cmp	r2, r3
 8000386:	da30      	bge.n	80003ea <Change_position+0x116>
		{
			if ((_current_position - _next_position) < 8)
 8000388:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <Change_position+0x134>)
 800038a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038e:	461a      	mov	r2, r3
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <Change_position+0x12c>)
 8000392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	2b07      	cmp	r3, #7
 800039a:	dc12      	bgt.n	80003c2 <Change_position+0xee>
			{
				HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2108      	movs	r1, #8
 80003a0:	4818      	ldr	r0, [pc, #96]	; (8000404 <Change_position+0x130>)
 80003a2:	f000 ff5d 	bl	8001260 <HAL_GPIO_WritePin>
				_options = (_current_position - _next_position);
 80003a6:	4b18      	ldr	r3, [pc, #96]	; (8000408 <Change_position+0x134>)
 80003a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003ac:	b29a      	uxth	r2, r3
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <Change_position+0x12c>)
 80003b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	1ad3      	subs	r3, r2, r3
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <Change_position+0x138>)
 80003be:	801a      	strh	r2, [r3, #0]
 80003c0:	e013      	b.n	80003ea <Change_position+0x116>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2108      	movs	r1, #8
 80003c6:	480f      	ldr	r0, [pc, #60]	; (8000404 <Change_position+0x130>)
 80003c8:	f000 ff4a 	bl	8001260 <HAL_GPIO_WritePin>
				_options = (16 - (_current_position - _next_position));
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <Change_position+0x12c>)
 80003ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <Change_position+0x134>)
 80003d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003da:	b29b      	uxth	r3, r3
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	b29b      	uxth	r3, r3
 80003e0:	3310      	adds	r3, #16
 80003e2:	b29b      	uxth	r3, r3
 80003e4:	b21a      	sxth	r2, r3
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <Change_position+0x138>)
 80003e8:	801a      	strh	r2, [r3, #0]
			}
		}

		HAL_TIM_PWM_Start_IT(PWM, TIM_CHANNEL_1);
 80003ea:	2100      	movs	r1, #0
 80003ec:	4808      	ldr	r0, [pc, #32]	; (8000410 <Change_position+0x13c>)
 80003ee:	f001 fc11 	bl	8001c14 <HAL_TIM_PWM_Start_IT>
	}
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000002c 	.word	0x2000002c
 8000400:	20000030 	.word	0x20000030
 8000404:	40010c00 	.word	0x40010c00
 8000408:	20000000 	.word	0x20000000
 800040c:	20000034 	.word	0x20000034
 8000410:	2000007c 	.word	0x2000007c

08000414 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	if (htim == PWM)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a14      	ldr	r2, [pc, #80]	; (8000470 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d120      	bne.n	8000466 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
	{
		_counter += 1;
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 800042c:	6013      	str	r3, [r2, #0]
		if (_counter == (_options * _ticks_to_next))
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <HAL_TIM_PWM_PulseFinishedCallback+0x64>)
 8000430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000434:	461a      	mov	r2, r3
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <HAL_TIM_PWM_PulseFinishedCallback+0x68>)
 8000438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800043c:	fb03 f202 	mul.w	r2, r3, r2
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_TIM_PWM_PulseFinishedCallback+0x60>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	429a      	cmp	r2, r3
 8000446:	d10e      	bne.n	8000466 <HAL_TIM_PWM_PulseFinishedCallback+0x52>
		{
			HAL_TIM_PWM_Stop_IT(PWM, TIM_CHANNEL_1);
 8000448:	2100      	movs	r1, #0
 800044a:	4809      	ldr	r0, [pc, #36]	; (8000470 <HAL_TIM_PWM_PulseFinishedCallback+0x5c>)
 800044c:	f001 fcca 	bl	8001de4 <HAL_TIM_PWM_Stop_IT>
			HAL_GPIO_WritePin(GPIOB, ENABLE_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8000458:	f000 ff02 	bl	8001260 <HAL_GPIO_WritePin>
			_current_position = _next_position;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800045e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 8000464:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000007c 	.word	0x2000007c
 8000474:	2000002c 	.word	0x2000002c
 8000478:	20000034 	.word	0x20000034
 800047c:	20000032 	.word	0x20000032
 8000480:	40010c00 	.word	0x40010c00
 8000484:	20000030 	.word	0x20000030
 8000488:	20000000 	.word	0x20000000

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fb58 	bl	8000b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f830 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f914 	bl	80006c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800049c:	f000 f872 	bl	8000584 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80004a0:	f000 f8e6 	bl	8000670 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Init_Driver(step_resolution);
 80004a4:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <main+0x5c>)
 80004a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fe4d 	bl	800014c <Init_Driver>
  HAL_UART_Receive_IT(&huart1, Rx_data, 2);
 80004b2:	2202      	movs	r2, #2
 80004b4:	490d      	ldr	r1, [pc, #52]	; (80004ec <main+0x60>)
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <main+0x64>)
 80004b8:	f002 fb4d 	bl	8002b56 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag == 1)
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <main+0x68>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d0fb      	beq.n	80004bc <main+0x30>
	  {
		Change_position(Convert_ascii_int(Rx_data));
 80004c4:	4809      	ldr	r0, [pc, #36]	; (80004ec <main+0x60>)
 80004c6:	f000 f949 	bl	800075c <Convert_ascii_int>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b21b      	sxth	r3, r3
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff00 	bl	80002d4 <Change_position>
		HAL_UART_Receive_IT(&huart1, Rx_data, 2);
 80004d4:	2202      	movs	r2, #2
 80004d6:	4905      	ldr	r1, [pc, #20]	; (80004ec <main+0x60>)
 80004d8:	4805      	ldr	r0, [pc, #20]	; (80004f0 <main+0x64>)
 80004da:	f002 fb3c 	bl	8002b56 <HAL_UART_Receive_IT>
		flag = 0;
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <main+0x68>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
	  if (flag == 1)
 80004e4:	e7ea      	b.n	80004bc <main+0x30>
 80004e6:	bf00      	nop
 80004e8:	20000002 	.word	0x20000002
 80004ec:	20000038 	.word	0x20000038
 80004f0:	2000003c 	.word	0x2000003c
 80004f4:	20000036 	.word	0x20000036

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b090      	sub	sp, #64	; 0x40
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	2228      	movs	r2, #40	; 0x28
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fe56 	bl	80031b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051a:	2301      	movs	r3, #1
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000528:	2301      	movs	r3, #1
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052c:	2302      	movs	r3, #2
 800052e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800053a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053c:	f107 0318 	add.w	r3, r7, #24
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fea5 	bl	8001290 <HAL_RCC_OscConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800054c:	f000 f99c 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	230f      	movs	r3, #15
 8000552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000554:	2302      	movs	r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800055c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2101      	movs	r1, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f001 f910 	bl	8001790 <HAL_RCC_ClockConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000576:	f000 f987 	bl	8000888 <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	3740      	adds	r7, #64	; 0x40
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08e      	sub	sp, #56	; 0x38
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b4:	4b2d      	ldr	r3, [pc, #180]	; (800066c <MX_TIM2_Init+0xe8>)
 80005b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 360;
 80005bc:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_TIM2_Init+0xe8>)
 80005be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80005c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_TIM2_Init+0xe8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_TIM2_Init+0xe8>)
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_TIM2_Init+0xe8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_TIM2_Init+0xe8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005dc:	4823      	ldr	r0, [pc, #140]	; (800066c <MX_TIM2_Init+0xe8>)
 80005de:	f001 fa71 	bl	8001ac4 <HAL_TIM_Base_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80005e8:	f000 f94e 	bl	8000888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005f6:	4619      	mov	r1, r3
 80005f8:	481c      	ldr	r0, [pc, #112]	; (800066c <MX_TIM2_Init+0xe8>)
 80005fa:	f001 fe63 	bl	80022c4 <HAL_TIM_ConfigClockSource>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000604:	f000 f940 	bl	8000888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000608:	4818      	ldr	r0, [pc, #96]	; (800066c <MX_TIM2_Init+0xe8>)
 800060a:	f001 faaa 	bl	8001b62 <HAL_TIM_PWM_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000614:	f000 f938 	bl	8000888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4619      	mov	r1, r3
 8000626:	4811      	ldr	r0, [pc, #68]	; (800066c <MX_TIM2_Init+0xe8>)
 8000628:	f002 f9d8 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000632:	f000 f929 	bl	8000888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000636:	2360      	movs	r3, #96	; 0x60
 8000638:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	4807      	ldr	r0, [pc, #28]	; (800066c <MX_TIM2_Init+0xe8>)
 800064e:	f001 fd7b 	bl	8002148 <HAL_TIM_PWM_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000658:	f000 f916 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <MX_TIM2_Init+0xe8>)
 800065e:	f000 f96f 	bl	8000940 <HAL_TIM_MspPostInit>

}
 8000662:	bf00      	nop
 8000664:	3738      	adds	r7, #56	; 0x38
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000007c 	.word	0x2000007c

08000670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000676:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <MX_USART1_UART_Init+0x50>)
 8000678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 8000696:	2204      	movs	r2, #4
 8000698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_USART1_UART_Init+0x4c>)
 80006a8:	f002 fa08 	bl	8002abc <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006b2:	f000 f8e9 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_GPIO_Init+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a1d      	ldr	r2, [pc, #116]	; (8000754 <MX_GPIO_Init+0x90>)
 80006de:	f043 0320 	orr.w	r3, r3, #32
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_GPIO_Init+0x90>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0x90>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0x90>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_GPIO_Init+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a11      	ldr	r2, [pc, #68]	; (8000754 <MX_GPIO_Init+0x90>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_GPIO_Init+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0304 	and.w	r3, r3, #4
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MS3_Pin|MS2_Pin|MS1_Pin|DIR_Pin
 8000720:	2200      	movs	r2, #0
 8000722:	f24e 2108 	movw	r1, #57864	; 0xe208
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <MX_GPIO_Init+0x94>)
 8000728:	f000 fd9a 	bl	8001260 <HAL_GPIO_WritePin>
                          |ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MS3_Pin MS2_Pin MS1_Pin DIR_Pin
                           ENABLE_Pin */
  GPIO_InitStruct.Pin = MS3_Pin|MS2_Pin|MS1_Pin|DIR_Pin
 800072c:	f24e 2308 	movw	r3, #57864	; 0xe208
 8000730:	613b      	str	r3, [r7, #16]
                          |ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2302      	movs	r3, #2
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0x94>)
 8000746:	f000 fc07 	bl	8000f58 <HAL_GPIO_Init>

}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	40010c00 	.word	0x40010c00

0800075c <Convert_ascii_int>:

/* USER CODE BEGIN 4 */
int Convert_ascii_int(uint8_t *Rx_data) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if (Rx_data[0] == 0x20) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b20      	cmp	r3, #32
 800076a:	d13e      	bne.n	80007ea <Convert_ascii_int+0x8e>
		if (Rx_data[1] == 0x31) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b31      	cmp	r3, #49	; 0x31
 8000774:	d101      	bne.n	800077a <Convert_ascii_int+0x1e>
			return 1;
 8000776:	2301      	movs	r3, #1
 8000778:	e06d      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x32){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b32      	cmp	r3, #50	; 0x32
 8000782:	d101      	bne.n	8000788 <Convert_ascii_int+0x2c>
			return 2;
 8000784:	2302      	movs	r3, #2
 8000786:	e066      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x33){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3301      	adds	r3, #1
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b33      	cmp	r3, #51	; 0x33
 8000790:	d101      	bne.n	8000796 <Convert_ascii_int+0x3a>
			return 3;
 8000792:	2303      	movs	r3, #3
 8000794:	e05f      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x34){
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3301      	adds	r3, #1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b34      	cmp	r3, #52	; 0x34
 800079e:	d101      	bne.n	80007a4 <Convert_ascii_int+0x48>
			return 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	e058      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x35){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b35      	cmp	r3, #53	; 0x35
 80007ac:	d101      	bne.n	80007b2 <Convert_ascii_int+0x56>
			return 5;
 80007ae:	2305      	movs	r3, #5
 80007b0:	e051      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x36){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3301      	adds	r3, #1
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b36      	cmp	r3, #54	; 0x36
 80007ba:	d101      	bne.n	80007c0 <Convert_ascii_int+0x64>
			return 6;
 80007bc:	2306      	movs	r3, #6
 80007be:	e04a      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x37){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3301      	adds	r3, #1
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b37      	cmp	r3, #55	; 0x37
 80007c8:	d101      	bne.n	80007ce <Convert_ascii_int+0x72>
			return 7;
 80007ca:	2307      	movs	r3, #7
 80007cc:	e043      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x38){
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3301      	adds	r3, #1
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b38      	cmp	r3, #56	; 0x38
 80007d6:	d101      	bne.n	80007dc <Convert_ascii_int+0x80>
			return 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	e03c      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x39){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b39      	cmp	r3, #57	; 0x39
 80007e4:	d101      	bne.n	80007ea <Convert_ascii_int+0x8e>
			return 9;
 80007e6:	2309      	movs	r3, #9
 80007e8:	e035      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
	}
	if (Rx_data[0] == 0x31) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b31      	cmp	r3, #49	; 0x31
 80007f0:	d130      	bne.n	8000854 <Convert_ascii_int+0xf8>
		if (Rx_data[1] == 0x30) {
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3301      	adds	r3, #1
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b30      	cmp	r3, #48	; 0x30
 80007fa:	d101      	bne.n	8000800 <Convert_ascii_int+0xa4>
			return 10;
 80007fc:	230a      	movs	r3, #10
 80007fe:	e02a      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x31) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3301      	adds	r3, #1
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b31      	cmp	r3, #49	; 0x31
 8000808:	d101      	bne.n	800080e <Convert_ascii_int+0xb2>
			return 11;
 800080a:	230b      	movs	r3, #11
 800080c:	e023      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x32){
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b32      	cmp	r3, #50	; 0x32
 8000816:	d101      	bne.n	800081c <Convert_ascii_int+0xc0>
			return 12;
 8000818:	230c      	movs	r3, #12
 800081a:	e01c      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x33){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3301      	adds	r3, #1
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b33      	cmp	r3, #51	; 0x33
 8000824:	d101      	bne.n	800082a <Convert_ascii_int+0xce>
			return 13;
 8000826:	230d      	movs	r3, #13
 8000828:	e015      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x34){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3301      	adds	r3, #1
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b34      	cmp	r3, #52	; 0x34
 8000832:	d101      	bne.n	8000838 <Convert_ascii_int+0xdc>
			return 14;
 8000834:	230e      	movs	r3, #14
 8000836:	e00e      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x35){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3301      	adds	r3, #1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b35      	cmp	r3, #53	; 0x35
 8000840:	d101      	bne.n	8000846 <Convert_ascii_int+0xea>
			return 15;
 8000842:	230f      	movs	r3, #15
 8000844:	e007      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
		if (Rx_data[1] == 0x36){
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b36      	cmp	r3, #54	; 0x36
 800084e:	d101      	bne.n	8000854 <Convert_ascii_int+0xf8>
			return 16;
 8000850:	2310      	movs	r3, #16
 8000852:	e000      	b.n	8000856 <Convert_ascii_int+0xfa>
		}
	}
	return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <HAL_UART_RxCpltCallback+0x20>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d102      	bne.n	8000876 <HAL_UART_RxCpltCallback+0x16>
		flag = 1;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <HAL_UART_RxCpltCallback+0x24>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
	}
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	2000003c 	.word	0x2000003c
 8000884:	20000036 	.word	0x20000036

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_MspInit+0x5c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x5c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x60>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_MspInit+0x60>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010000 	.word	0x40010000

080008f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000908:	d113      	bne.n	8000932 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_TIM_Base_MspInit+0x44>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_TIM_Base_MspInit+0x44>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	61d3      	str	r3, [r2, #28]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_TIM_Base_MspInit+0x44>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	201c      	movs	r0, #28
 8000928:	f000 fa69 	bl	8000dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800092c:	201c      	movs	r0, #28
 800092e:	f000 fa82 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800095e:	d12a      	bne.n	80009b6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <HAL_TIM_MspPostInit+0x80>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a16      	ldr	r2, [pc, #88]	; (80009c0 <HAL_TIM_MspPostInit+0x80>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_TIM_MspPostInit+0x80>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800097c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <HAL_TIM_MspPostInit+0x84>)
 800098e:	f000 fae3 	bl	8000f58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <HAL_TIM_MspPostInit+0x88>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800099e:	61fb      	str	r3, [r7, #28]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <HAL_TIM_MspPostInit+0x88>)
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40010800 	.word	0x40010800
 80009c8:	40010000 	.word	0x40010000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0310 	add.w	r3, r7, #16
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <HAL_UART_MspInit+0x9c>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d139      	bne.n	8000a60 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <HAL_UART_MspInit+0xa0>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_UART_MspInit+0xa0>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <HAL_UART_MspInit+0xa0>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_UART_MspInit+0xa0>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <HAL_UART_MspInit+0xa0>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_UART_MspInit+0xa0>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <HAL_UART_MspInit+0xa4>)
 8000a32:	f000 fa91 	bl	8000f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <HAL_UART_MspInit+0xa4>)
 8000a4c:	f000 fa84 	bl	8000f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2025      	movs	r0, #37	; 0x25
 8000a56:	f000 f9d2 	bl	8000dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a5a:	2025      	movs	r0, #37	; 0x25
 8000a5c:	f000 f9eb 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010800 	.word	0x40010800

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr

08000ab6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aba:	f000 f889 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM2_IRQHandler+0x10>)
 8000aca:	f001 fa35 	bl	8001f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000007c 	.word	0x2000007c

08000ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <USART1_IRQHandler+0x10>)
 8000ade:	f002 f88f 	bl	8002c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000003c 	.word	0x2000003c

08000aec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000af8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b1e:	f7ff ffe5 	bl	8000aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f002 fb25 	bl	8003170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b26:	f7ff fcb1 	bl	800048c <main>
  bx lr
 8000b2a:	4770      	bx	lr
  ldr r3, =_sidata
 8000b2c:	08003210 	.word	0x08003210
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b34:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000b38:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000b3c:	200000c8 	.word	0x200000c8

08000b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC1_2_IRQHandler>
	...

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x28>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f947 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe98 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f95f 	bl	8000e52 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f927 	bl	8000dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	2000000c 	.word	0x2000000c
 8000bcc:	20000008 	.word	0x20000008

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	200000c4 	.word	0x200000c4

08000bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	200000c4 	.word	0x200000c4

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff fff0 	bl	8000bf4 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffe0 	bl	8000bf4 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000000c 	.word	0x2000000c

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <__NVIC_EnableIRQ+0x34>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f7ff ff90 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff2d 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff42 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff90 	bl	8000d40 <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5f 	bl	8000cec <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff35 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffa2 	bl	8000da4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d005      	beq.n	8000e8e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2204      	movs	r2, #4
 8000e86:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e051      	b.n	8000f32 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 020e 	bic.w	r2, r2, #14
 8000e9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0201 	bic.w	r2, r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <HAL_DMA_Abort_IT+0xd0>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d029      	beq.n	8000f0c <HAL_DMA_Abort_IT+0xa0>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a20      	ldr	r2, [pc, #128]	; (8000f40 <HAL_DMA_Abort_IT+0xd4>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d022      	beq.n	8000f08 <HAL_DMA_Abort_IT+0x9c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	; (8000f44 <HAL_DMA_Abort_IT+0xd8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d01a      	beq.n	8000f02 <HAL_DMA_Abort_IT+0x96>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_DMA_Abort_IT+0xdc>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d012      	beq.n	8000efc <HAL_DMA_Abort_IT+0x90>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <HAL_DMA_Abort_IT+0xe0>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00a      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x8a>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <HAL_DMA_Abort_IT+0xe4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d102      	bne.n	8000ef0 <HAL_DMA_Abort_IT+0x84>
 8000eea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eee:	e00e      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ef4:	e00b      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000efa:	e008      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	e005      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	e002      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000f08:	2310      	movs	r3, #16
 8000f0a:	e000      	b.n	8000f0e <HAL_DMA_Abort_IT+0xa2>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <HAL_DMA_Abort_IT+0xe8>)
 8000f10:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	4798      	blx	r3
    } 
  }
  return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40020008 	.word	0x40020008
 8000f40:	4002001c 	.word	0x4002001c
 8000f44:	40020030 	.word	0x40020030
 8000f48:	40020044 	.word	0x40020044
 8000f4c:	40020058 	.word	0x40020058
 8000f50:	4002006c 	.word	0x4002006c
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b08b      	sub	sp, #44	; 0x2c
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6a:	e169      	b.n	8001240 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8158 	bne.w	800123a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	4a9a      	ldr	r2, [pc, #616]	; (80011f8 <HAL_GPIO_Init+0x2a0>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d05e      	beq.n	8001052 <HAL_GPIO_Init+0xfa>
 8000f94:	4a98      	ldr	r2, [pc, #608]	; (80011f8 <HAL_GPIO_Init+0x2a0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d875      	bhi.n	8001086 <HAL_GPIO_Init+0x12e>
 8000f9a:	4a98      	ldr	r2, [pc, #608]	; (80011fc <HAL_GPIO_Init+0x2a4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d058      	beq.n	8001052 <HAL_GPIO_Init+0xfa>
 8000fa0:	4a96      	ldr	r2, [pc, #600]	; (80011fc <HAL_GPIO_Init+0x2a4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d86f      	bhi.n	8001086 <HAL_GPIO_Init+0x12e>
 8000fa6:	4a96      	ldr	r2, [pc, #600]	; (8001200 <HAL_GPIO_Init+0x2a8>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d052      	beq.n	8001052 <HAL_GPIO_Init+0xfa>
 8000fac:	4a94      	ldr	r2, [pc, #592]	; (8001200 <HAL_GPIO_Init+0x2a8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d869      	bhi.n	8001086 <HAL_GPIO_Init+0x12e>
 8000fb2:	4a94      	ldr	r2, [pc, #592]	; (8001204 <HAL_GPIO_Init+0x2ac>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d04c      	beq.n	8001052 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a92      	ldr	r2, [pc, #584]	; (8001204 <HAL_GPIO_Init+0x2ac>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d863      	bhi.n	8001086 <HAL_GPIO_Init+0x12e>
 8000fbe:	4a92      	ldr	r2, [pc, #584]	; (8001208 <HAL_GPIO_Init+0x2b0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d046      	beq.n	8001052 <HAL_GPIO_Init+0xfa>
 8000fc4:	4a90      	ldr	r2, [pc, #576]	; (8001208 <HAL_GPIO_Init+0x2b0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d85d      	bhi.n	8001086 <HAL_GPIO_Init+0x12e>
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d82a      	bhi.n	8001024 <HAL_GPIO_Init+0xcc>
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d859      	bhi.n	8001086 <HAL_GPIO_Init+0x12e>
 8000fd2:	a201      	add	r2, pc, #4	; (adr r2, 8000fd8 <HAL_GPIO_Init+0x80>)
 8000fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd8:	08001053 	.word	0x08001053
 8000fdc:	0800102d 	.word	0x0800102d
 8000fe0:	0800103f 	.word	0x0800103f
 8000fe4:	08001081 	.word	0x08001081
 8000fe8:	08001087 	.word	0x08001087
 8000fec:	08001087 	.word	0x08001087
 8000ff0:	08001087 	.word	0x08001087
 8000ff4:	08001087 	.word	0x08001087
 8000ff8:	08001087 	.word	0x08001087
 8000ffc:	08001087 	.word	0x08001087
 8001000:	08001087 	.word	0x08001087
 8001004:	08001087 	.word	0x08001087
 8001008:	08001087 	.word	0x08001087
 800100c:	08001087 	.word	0x08001087
 8001010:	08001087 	.word	0x08001087
 8001014:	08001087 	.word	0x08001087
 8001018:	08001087 	.word	0x08001087
 800101c:	08001035 	.word	0x08001035
 8001020:	08001049 	.word	0x08001049
 8001024:	4a79      	ldr	r2, [pc, #484]	; (800120c <HAL_GPIO_Init+0x2b4>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800102a:	e02c      	b.n	8001086 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	623b      	str	r3, [r7, #32]
          break;
 8001032:	e029      	b.n	8001088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	3304      	adds	r3, #4
 800103a:	623b      	str	r3, [r7, #32]
          break;
 800103c:	e024      	b.n	8001088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	3308      	adds	r3, #8
 8001044:	623b      	str	r3, [r7, #32]
          break;
 8001046:	e01f      	b.n	8001088 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	330c      	adds	r3, #12
 800104e:	623b      	str	r3, [r7, #32]
          break;
 8001050:	e01a      	b.n	8001088 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800105a:	2304      	movs	r3, #4
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e013      	b.n	8001088 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d105      	bne.n	8001074 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001068:	2308      	movs	r3, #8
 800106a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	611a      	str	r2, [r3, #16]
          break;
 8001072:	e009      	b.n	8001088 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001074:	2308      	movs	r3, #8
 8001076:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	615a      	str	r2, [r3, #20]
          break;
 800107e:	e003      	b.n	8001088 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
          break;
 8001084:	e000      	b.n	8001088 <HAL_GPIO_Init+0x130>
          break;
 8001086:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d801      	bhi.n	8001092 <HAL_GPIO_Init+0x13a>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	e001      	b.n	8001096 <HAL_GPIO_Init+0x13e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3304      	adds	r3, #4
 8001096:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d802      	bhi.n	80010a4 <HAL_GPIO_Init+0x14c>
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	e002      	b.n	80010aa <HAL_GPIO_Init+0x152>
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	3b08      	subs	r3, #8
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	210f      	movs	r1, #15
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	6a39      	ldr	r1, [r7, #32]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	431a      	orrs	r2, r3
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 80b1 	beq.w	800123a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d8:	4b4d      	ldr	r3, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x2b8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a4c      	ldr	r2, [pc, #304]	; (8001210 <HAL_GPIO_Init+0x2b8>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b4a      	ldr	r3, [pc, #296]	; (8001210 <HAL_GPIO_Init+0x2b8>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010f0:	4a48      	ldr	r2, [pc, #288]	; (8001214 <HAL_GPIO_Init+0x2bc>)
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	089b      	lsrs	r3, r3, #2
 80010f6:	3302      	adds	r3, #2
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a40      	ldr	r2, [pc, #256]	; (8001218 <HAL_GPIO_Init+0x2c0>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d013      	beq.n	8001144 <HAL_GPIO_Init+0x1ec>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a3f      	ldr	r2, [pc, #252]	; (800121c <HAL_GPIO_Init+0x2c4>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d00d      	beq.n	8001140 <HAL_GPIO_Init+0x1e8>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a3e      	ldr	r2, [pc, #248]	; (8001220 <HAL_GPIO_Init+0x2c8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d007      	beq.n	800113c <HAL_GPIO_Init+0x1e4>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3d      	ldr	r2, [pc, #244]	; (8001224 <HAL_GPIO_Init+0x2cc>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d101      	bne.n	8001138 <HAL_GPIO_Init+0x1e0>
 8001134:	2303      	movs	r3, #3
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001138:	2304      	movs	r3, #4
 800113a:	e004      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 800113c:	2302      	movs	r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001144:	2300      	movs	r3, #0
 8001146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001156:	492f      	ldr	r1, [pc, #188]	; (8001214 <HAL_GPIO_Init+0x2bc>)
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	492c      	ldr	r1, [pc, #176]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	43db      	mvns	r3, r3
 8001186:	4928      	ldr	r1, [pc, #160]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 8001188:	4013      	ands	r3, r2
 800118a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4922      	ldr	r1, [pc, #136]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	491e      	ldr	r1, [pc, #120]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	4918      	ldr	r1, [pc, #96]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4914      	ldr	r1, [pc, #80]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d021      	beq.n	800122c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011ea:	68da      	ldr	r2, [r3, #12]
 80011ec:	490e      	ldr	r1, [pc, #56]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	60cb      	str	r3, [r1, #12]
 80011f4:	e021      	b.n	800123a <HAL_GPIO_Init+0x2e2>
 80011f6:	bf00      	nop
 80011f8:	10320000 	.word	0x10320000
 80011fc:	10310000 	.word	0x10310000
 8001200:	10220000 	.word	0x10220000
 8001204:	10210000 	.word	0x10210000
 8001208:	10120000 	.word	0x10120000
 800120c:	10110000 	.word	0x10110000
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00
 8001220:	40011000 	.word	0x40011000
 8001224:	40011400 	.word	0x40011400
 8001228:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_GPIO_Init+0x304>)
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	43db      	mvns	r3, r3
 8001234:	4909      	ldr	r1, [pc, #36]	; (800125c <HAL_GPIO_Init+0x304>)
 8001236:	4013      	ands	r3, r2
 8001238:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	3301      	adds	r3, #1
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	f47f ae8e 	bne.w	8000f6c <HAL_GPIO_Init+0x14>
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	372c      	adds	r7, #44	; 0x2c
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	611a      	str	r2, [r3, #16]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e26c      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8087 	beq.w	80013be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b0:	4b92      	ldr	r3, [pc, #584]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d00c      	beq.n	80012d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012bc:	4b8f      	ldr	r3, [pc, #572]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d112      	bne.n	80012ee <HAL_RCC_OscConfig+0x5e>
 80012c8:	4b8c      	ldr	r3, [pc, #560]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d4:	d10b      	bne.n	80012ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d06c      	beq.n	80013bc <HAL_RCC_OscConfig+0x12c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d168      	bne.n	80013bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e246      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x76>
 80012f8:	4b80      	ldr	r3, [pc, #512]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a7f      	ldr	r2, [pc, #508]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e02e      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x98>
 800130e:	4b7b      	ldr	r3, [pc, #492]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a77      	ldr	r2, [pc, #476]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e01d      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	d10c      	bne.n	800134c <HAL_RCC_OscConfig+0xbc>
 8001332:	4b72      	ldr	r3, [pc, #456]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a71      	ldr	r2, [pc, #452]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6e      	ldr	r2, [pc, #440]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e00b      	b.n	8001364 <HAL_RCC_OscConfig+0xd4>
 800134c:	4b6b      	ldr	r3, [pc, #428]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a6a      	ldr	r2, [pc, #424]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b68      	ldr	r3, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a67      	ldr	r2, [pc, #412]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d013      	beq.n	8001394 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc42 	bl	8000bf4 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fc3e 	bl	8000bf4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	; 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1fa      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0xe4>
 8001392:	e014      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001394:	f7ff fc2e 	bl	8000bf4 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	e008      	b.n	80013ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800139c:	f7ff fc2a 	bl	8000bf4 <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b64      	cmp	r3, #100	; 0x64
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e1e6      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ae:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f0      	bne.n	800139c <HAL_RCC_OscConfig+0x10c>
 80013ba:	e000      	b.n	80013be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d063      	beq.n	8001492 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00b      	beq.n	80013ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x18c>
 80013e2:	4b46      	ldr	r3, [pc, #280]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d116      	bne.n	800141c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x176>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e1ba      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4939      	ldr	r1, [pc, #228]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	e03a      	b.n	8001492 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d020      	beq.n	8001466 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001424:	4b36      	ldr	r3, [pc, #216]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fbe3 	bl	8000bf4 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fbdf 	bl	8000bf4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e19b      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4927      	ldr	r1, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001460:	4313      	orrs	r3, r2
 8001462:	600b      	str	r3, [r1, #0]
 8001464:	e015      	b.n	8001492 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_RCC_OscConfig+0x270>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fbc2 	bl	8000bf4 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001474:	f7ff fbbe 	bl	8000bf4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e17a      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d03a      	beq.n	8001514 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d019      	beq.n	80014da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_RCC_OscConfig+0x274>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fba2 	bl	8000bf4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fb9e 	bl	8000bf4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e15a      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_RCC_OscConfig+0x26c>)
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014d2:	2001      	movs	r0, #1
 80014d4:	f000 fad8 	bl	8001a88 <RCC_Delay>
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_RCC_OscConfig+0x274>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e0:	f7ff fb88 	bl	8000bf4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e6:	e00f      	b.n	8001508 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb84 	bl	8000bf4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d908      	bls.n	8001508 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e140      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	42420000 	.word	0x42420000
 8001504:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b9e      	ldr	r3, [pc, #632]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e9      	bne.n	80014e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80a6 	beq.w	800166e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b97      	ldr	r3, [pc, #604]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10d      	bne.n	800154e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b94      	ldr	r3, [pc, #592]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a93      	ldr	r2, [pc, #588]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]
 800153e:	4b91      	ldr	r3, [pc, #580]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d118      	bne.n	800158c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a8a      	ldr	r2, [pc, #552]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fb45 	bl	8000bf4 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156e:	f7ff fb41 	bl	8000bf4 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	; 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0fd      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b81      	ldr	r3, [pc, #516]	; (8001788 <HAL_RCC_OscConfig+0x4f8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x312>
 8001594:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	6213      	str	r3, [r2, #32]
 80015a0:	e02d      	b.n	80015fe <HAL_RCC_OscConfig+0x36e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x334>
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a75      	ldr	r2, [pc, #468]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a72      	ldr	r2, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	e01c      	b.n	80015fe <HAL_RCC_OscConfig+0x36e>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x356>
 80015cc:	4b6d      	ldr	r3, [pc, #436]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a6c      	ldr	r2, [pc, #432]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a69      	ldr	r2, [pc, #420]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	e00b      	b.n	80015fe <HAL_RCC_OscConfig+0x36e>
 80015e6:	4b67      	ldr	r3, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a66      	ldr	r2, [pc, #408]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	4b64      	ldr	r3, [pc, #400]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d015      	beq.n	8001632 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001606:	f7ff faf5 	bl	8000bf4 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff faf1 	bl	8000bf4 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e0ab      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	4b57      	ldr	r3, [pc, #348]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ee      	beq.n	800160e <HAL_RCC_OscConfig+0x37e>
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fadf 	bl	8000bf4 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fadb 	bl	8000bf4 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e095      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ee      	bne.n	800163a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a47      	ldr	r2, [pc, #284]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8081 	beq.w	800177a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d061      	beq.n	8001748 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d146      	bne.n	800171a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b3f      	ldr	r3, [pc, #252]	; (800178c <HAL_RCC_OscConfig+0x4fc>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff faaf 	bl	8000bf4 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff faab 	bl	8000bf4 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e067      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d108      	bne.n	80016d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016c2:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	492d      	ldr	r1, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d4:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a19      	ldr	r1, [r3, #32]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	430b      	orrs	r3, r1
 80016e6:	4927      	ldr	r1, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <HAL_RCC_OscConfig+0x4fc>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f2:	f7ff fa7f 	bl	8000bf4 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fa:	f7ff fa7b 	bl	8000bf4 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e037      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x46a>
 8001718:	e02f      	b.n	800177a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_RCC_OscConfig+0x4fc>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fa68 	bl	8000bf4 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001728:	f7ff fa64 	bl	8000bf4 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e020      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f0      	bne.n	8001728 <HAL_RCC_OscConfig+0x498>
 8001746:	e018      	b.n	800177a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e013      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x4f4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	429a      	cmp	r2, r3
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40007000 	.word	0x40007000
 800178c:	42420060 	.word	0x42420060

08001790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0d0      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b6a      	ldr	r3, [pc, #424]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d910      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b67      	ldr	r3, [pc, #412]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	4965      	ldr	r1, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800180e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d040      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d115      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e073      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3d      	ldr	r3, [pc, #244]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e06b      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b39      	ldr	r3, [pc, #228]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4936      	ldr	r1, [pc, #216]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff f9b8 	bl	8000bf4 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff f9b4 	bl	8000bf4 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e053      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d210      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 0207 	bic.w	r2, r3, #7
 80018c6:	4922      	ldr	r1, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f821 	bl	8001964 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1cc>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f916 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000
 8001954:	40021000 	.word	0x40021000
 8001958:	080031f0 	.word	0x080031f0
 800195c:	20000004 	.word	0x20000004
 8001960:	20000008 	.word	0x20000008

08001964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001964:	b490      	push	{r4, r7}
 8001966:	b08a      	sub	sp, #40	; 0x28
 8001968:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800196a:	4b2a      	ldr	r3, [pc, #168]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb0>)
 800196c:	1d3c      	adds	r4, r7, #4
 800196e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001974:	f240 2301 	movw	r3, #513	; 0x201
 8001978:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d002      	beq.n	80019a4 <HAL_RCC_GetSysClockFreq+0x40>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d003      	beq.n	80019aa <HAL_RCC_GetSysClockFreq+0x46>
 80019a2:	e02d      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a6:	623b      	str	r3, [r7, #32]
      break;
 80019a8:	e02d      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	0c9b      	lsrs	r3, r3, #18
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019b6:	4413      	add	r3, r2
 80019b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0c5b      	lsrs	r3, r3, #17
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019d6:	4413      	add	r3, r2
 80019d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e2:	fb02 f203 	mul.w	r2, r2, r3
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
 80019ee:	e004      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f4:	fb02 f303 	mul.w	r3, r2, r3
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	623b      	str	r3, [r7, #32]
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a02:	623b      	str	r3, [r7, #32]
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	6a3b      	ldr	r3, [r7, #32]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc90      	pop	{r4, r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	080031e0 	.word	0x080031e0
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	007a1200 	.word	0x007a1200
 8001a20:	003d0900 	.word	0x003d0900

08001a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff2 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	08003200 	.word	0x08003200

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	0adb      	lsrs	r3, r3, #11
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40021000 	.word	0x40021000
 8001a84:	08003200 	.word	0x08003200

08001a88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <RCC_Delay+0x34>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <RCC_Delay+0x38>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0a5b      	lsrs	r3, r3, #9
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa4:	bf00      	nop
  }
  while (Delay --);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	60fa      	str	r2, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f9      	bne.n	8001aa4 <RCC_Delay+0x1c>
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	10624dd3 	.word	0x10624dd3

08001ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e041      	b.n	8001b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7fe ff04 	bl	80008f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 fcc6 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e041      	b.n	8001bf8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d106      	bne.n	8001b8e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f839 	bl	8001c00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f000 fc77 	bl	8002494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_TIM_PWM_Start_IT+0x24>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	e022      	b.n	8001c7e <HAL_TIM_PWM_Start_IT+0x6a>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d109      	bne.n	8001c52 <HAL_TIM_PWM_Start_IT+0x3e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	e015      	b.n	8001c7e <HAL_TIM_PWM_Start_IT+0x6a>
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d109      	bne.n	8001c6c <HAL_TIM_PWM_Start_IT+0x58>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf14      	ite	ne
 8001c64:	2301      	movne	r3, #1
 8001c66:	2300      	moveq	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	e008      	b.n	8001c7e <HAL_TIM_PWM_Start_IT+0x6a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0a4      	b.n	8001dd0 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d104      	bne.n	8001c96 <HAL_TIM_PWM_Start_IT+0x82>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c94:	e013      	b.n	8001cbe <HAL_TIM_PWM_Start_IT+0xaa>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d104      	bne.n	8001ca6 <HAL_TIM_PWM_Start_IT+0x92>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca4:	e00b      	b.n	8001cbe <HAL_TIM_PWM_Start_IT+0xaa>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d104      	bne.n	8001cb6 <HAL_TIM_PWM_Start_IT+0xa2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb4:	e003      	b.n	8001cbe <HAL_TIM_PWM_Start_IT+0xaa>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d841      	bhi.n	8001d48 <HAL_TIM_PWM_Start_IT+0x134>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <HAL_TIM_PWM_Start_IT+0xb8>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d01 	.word	0x08001d01
 8001cd0:	08001d49 	.word	0x08001d49
 8001cd4:	08001d49 	.word	0x08001d49
 8001cd8:	08001d49 	.word	0x08001d49
 8001cdc:	08001d13 	.word	0x08001d13
 8001ce0:	08001d49 	.word	0x08001d49
 8001ce4:	08001d49 	.word	0x08001d49
 8001ce8:	08001d49 	.word	0x08001d49
 8001cec:	08001d25 	.word	0x08001d25
 8001cf0:	08001d49 	.word	0x08001d49
 8001cf4:	08001d49 	.word	0x08001d49
 8001cf8:	08001d49 	.word	0x08001d49
 8001cfc:	08001d37 	.word	0x08001d37
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0202 	orr.w	r2, r2, #2
 8001d0e:	60da      	str	r2, [r3, #12]
      break;
 8001d10:	e01b      	b.n	8001d4a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0204 	orr.w	r2, r2, #4
 8001d20:	60da      	str	r2, [r3, #12]
      break;
 8001d22:	e012      	b.n	8001d4a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0208 	orr.w	r2, r2, #8
 8001d32:	60da      	str	r2, [r3, #12]
      break;
 8001d34:	e009      	b.n	8001d4a <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f042 0210 	orr.w	r2, r2, #16
 8001d44:	60da      	str	r2, [r3, #12]
      break;
 8001d46:	e000      	b.n	8001d4a <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8001d48:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	6839      	ldr	r1, [r7, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe1e 	bl	8002994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d107      	bne.n	8001d72 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00e      	beq.n	8001d9a <HAL_TIM_PWM_Start_IT+0x186>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d84:	d009      	beq.n	8001d9a <HAL_TIM_PWM_Start_IT+0x186>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_TIM_PWM_Start_IT+0x1c8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_TIM_PWM_Start_IT+0x186>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d111      	bne.n	8001dbe <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	d010      	beq.n	8001dce <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbc:	e007      	b.n	8001dce <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800

08001de4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b0c      	cmp	r3, #12
 8001df2:	d841      	bhi.n	8001e78 <HAL_TIM_PWM_Stop_IT+0x94>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_TIM_PWM_Stop_IT+0x18>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e31 	.word	0x08001e31
 8001e00:	08001e79 	.word	0x08001e79
 8001e04:	08001e79 	.word	0x08001e79
 8001e08:	08001e79 	.word	0x08001e79
 8001e0c:	08001e43 	.word	0x08001e43
 8001e10:	08001e79 	.word	0x08001e79
 8001e14:	08001e79 	.word	0x08001e79
 8001e18:	08001e79 	.word	0x08001e79
 8001e1c:	08001e55 	.word	0x08001e55
 8001e20:	08001e79 	.word	0x08001e79
 8001e24:	08001e79 	.word	0x08001e79
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e67 	.word	0x08001e67
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0202 	bic.w	r2, r2, #2
 8001e3e:	60da      	str	r2, [r3, #12]
      break;
 8001e40:	e01b      	b.n	8001e7a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0204 	bic.w	r2, r2, #4
 8001e50:	60da      	str	r2, [r3, #12]
      break;
 8001e52:	e012      	b.n	8001e7a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0208 	bic.w	r2, r2, #8
 8001e62:	60da      	str	r2, [r3, #12]
      break;
 8001e64:	e009      	b.n	8001e7a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0210 	bic.w	r2, r2, #16
 8001e74:	60da      	str	r2, [r3, #12]
      break;
 8001e76:	e000      	b.n	8001e7a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8001e78:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fd86 	bl	8002994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a29      	ldr	r2, [pc, #164]	; (8001f34 <HAL_TIM_PWM_Stop_IT+0x150>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d117      	bne.n	8001ec2 <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_TIM_PWM_Stop_IT+0xde>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	f240 4344 	movw	r3, #1092	; 0x444
 8001eac:	4013      	ands	r3, r2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d107      	bne.n	8001ec2 <HAL_TIM_PWM_Stop_IT+0xde>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10f      	bne.n	8001ef2 <HAL_TIM_PWM_Stop_IT+0x10e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	f240 4344 	movw	r3, #1092	; 0x444
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d107      	bne.n	8001ef2 <HAL_TIM_PWM_Stop_IT+0x10e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0201 	bic.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d104      	bne.n	8001f02 <HAL_TIM_PWM_Stop_IT+0x11e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f00:	e013      	b.n	8001f2a <HAL_TIM_PWM_Stop_IT+0x146>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d104      	bne.n	8001f12 <HAL_TIM_PWM_Stop_IT+0x12e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f10:	e00b      	b.n	8001f2a <HAL_TIM_PWM_Stop_IT+0x146>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d104      	bne.n	8001f22 <HAL_TIM_PWM_Stop_IT+0x13e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f20:	e003      	b.n	8001f2a <HAL_TIM_PWM_Stop_IT+0x146>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40012c00 	.word	0x40012c00

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fa78 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fa6b 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe fa43 	bl	8000414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 fa4e 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa41 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe fa19 	bl	8000414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fa24 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fa17 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7fe f9ef 	bl	8000414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f9fa 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f9ed 	bl	800245e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7fe f9c5 	bl	8000414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0201 	mvn.w	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f9c8 	bl	800244c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fce1 	bl	8002aaa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f9b7 	bl	8002482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fcac 	bl	8002a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800215e:	2302      	movs	r3, #2
 8002160:	e0ac      	b.n	80022bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b0c      	cmp	r3, #12
 800216e:	f200 809f 	bhi.w	80022b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002172:	a201      	add	r2, pc, #4	; (adr r2, 8002178 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	080021ad 	.word	0x080021ad
 800217c:	080022b1 	.word	0x080022b1
 8002180:	080022b1 	.word	0x080022b1
 8002184:	080022b1 	.word	0x080022b1
 8002188:	080021ed 	.word	0x080021ed
 800218c:	080022b1 	.word	0x080022b1
 8002190:	080022b1 	.word	0x080022b1
 8002194:	080022b1 	.word	0x080022b1
 8002198:	0800222f 	.word	0x0800222f
 800219c:	080022b1 	.word	0x080022b1
 80021a0:	080022b1 	.word	0x080022b1
 80021a4:	080022b1 	.word	0x080022b1
 80021a8:	0800226f 	.word	0x0800226f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f9d0 	bl	8002558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0208 	orr.w	r2, r2, #8
 80021c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0204 	bic.w	r2, r2, #4
 80021d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6999      	ldr	r1, [r3, #24]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	619a      	str	r2, [r3, #24]
      break;
 80021ea:	e062      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fa16 	bl	8002624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6999      	ldr	r1, [r3, #24]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	021a      	lsls	r2, r3, #8
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	619a      	str	r2, [r3, #24]
      break;
 800222c:	e041      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68b9      	ldr	r1, [r7, #8]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa5f 	bl	80026f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0208 	orr.w	r2, r2, #8
 8002248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0204 	bic.w	r2, r2, #4
 8002258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69d9      	ldr	r1, [r3, #28]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	61da      	str	r2, [r3, #28]
      break;
 800226c:	e021      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 faa9 	bl	80027cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69d9      	ldr	r1, [r3, #28]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	61da      	str	r2, [r3, #28]
      break;
 80022ae:	e000      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80022b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_TIM_ConfigClockSource+0x18>
 80022d8:	2302      	movs	r3, #2
 80022da:	e0b3      	b.n	8002444 <HAL_TIM_ConfigClockSource+0x180>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002302:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002314:	d03e      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xd0>
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231a:	f200 8087 	bhi.w	800242c <HAL_TIM_ConfigClockSource+0x168>
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002322:	f000 8085 	beq.w	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232a:	d87f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d01a      	beq.n	8002366 <HAL_TIM_ConfigClockSource+0xa2>
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d87b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002334:	2b60      	cmp	r3, #96	; 0x60
 8002336:	d050      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x116>
 8002338:	2b60      	cmp	r3, #96	; 0x60
 800233a:	d877      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800233c:	2b50      	cmp	r3, #80	; 0x50
 800233e:	d03c      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0xf6>
 8002340:	2b50      	cmp	r3, #80	; 0x50
 8002342:	d873      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d058      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0x136>
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d86f      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800234c:	2b30      	cmp	r3, #48	; 0x30
 800234e:	d064      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002350:	2b30      	cmp	r3, #48	; 0x30
 8002352:	d86b      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 8002354:	2b20      	cmp	r3, #32
 8002356:	d060      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002358:	2b20      	cmp	r3, #32
 800235a:	d867      	bhi.n	800242c <HAL_TIM_ConfigClockSource+0x168>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d05c      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
 8002360:	2b10      	cmp	r3, #16
 8002362:	d05a      	beq.n	800241a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002364:	e062      	b.n	800242c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6899      	ldr	r1, [r3, #8]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	f000 faee 	bl	8002956 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002388:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	609a      	str	r2, [r3, #8]
      break;
 8002392:	e04e      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f000 fad7 	bl	8002956 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b6:	609a      	str	r2, [r3, #8]
      break;
 80023b8:	e03b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 fa4e 	bl	8002868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2150      	movs	r1, #80	; 0x50
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 faa5 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e02b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6818      	ldr	r0, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f000 fa6c 	bl	80028c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2160      	movs	r1, #96	; 0x60
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa95 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 80023f8:	e01b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	461a      	mov	r2, r3
 8002408:	f000 fa2e 	bl	8002868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fa85 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 8002418:	e00b      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4610      	mov	r0, r2
 8002426:	f000 fa7c 	bl	8002922 <TIM_ITRx_SetConfig>
        break;
 800242a:	e002      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800242c:	bf00      	nop
 800242e:	e000      	b.n	8002432 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002430:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a29      	ldr	r2, [pc, #164]	; (800254c <TIM_Base_SetConfig+0xb8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	d007      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a26      	ldr	r2, [pc, #152]	; (8002550 <TIM_Base_SetConfig+0xbc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0x30>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <TIM_Base_SetConfig+0xc0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <TIM_Base_SetConfig+0xb8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00b      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d007      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a19      	ldr	r2, [pc, #100]	; (8002550 <TIM_Base_SetConfig+0xbc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d003      	beq.n	80024f6 <TIM_Base_SetConfig+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <TIM_Base_SetConfig+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d108      	bne.n	8002508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <TIM_Base_SetConfig+0xb8>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	615a      	str	r2, [r3, #20]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	40012c00 	.word	0x40012c00
 8002550:	40000400 	.word	0x40000400
 8002554:	40000800 	.word	0x40000800

08002558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0201 	bic.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f023 0302 	bic.w	r3, r3, #2
 80025a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a1c      	ldr	r2, [pc, #112]	; (8002620 <TIM_OC1_SetConfig+0xc8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10c      	bne.n	80025ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0308 	bic.w	r3, r3, #8
 80025ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a13      	ldr	r2, [pc, #76]	; (8002620 <TIM_OC1_SetConfig+0xc8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d111      	bne.n	80025fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	621a      	str	r2, [r3, #32]
}
 8002614:	bf00      	nop
 8002616:	371c      	adds	r7, #28
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40012c00 	.word	0x40012c00

08002624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f023 0210 	bic.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f023 0320 	bic.w	r3, r3, #32
 800266e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <TIM_OC2_SetConfig+0xd0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d10d      	bne.n	80026a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <TIM_OC2_SetConfig+0xd0>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d113      	bne.n	80026d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	621a      	str	r2, [r3, #32]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	40012c00 	.word	0x40012c00

080026f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <TIM_OC3_SetConfig+0xd0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10d      	bne.n	8002772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800275c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <TIM_OC3_SetConfig+0xd0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	40012c00 	.word	0x40012c00

080027cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	031b      	lsls	r3, r3, #12
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0f      	ldr	r2, [pc, #60]	; (8002864 <TIM_OC4_SetConfig+0x98>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d109      	bne.n	8002840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	019b      	lsls	r3, r3, #6
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40012c00 	.word	0x40012c00

08002868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f023 0201 	bic.w	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 030a 	bic.w	r3, r3, #10
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 0210 	bic.w	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 0307 	orr.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	021a      	lsls	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2201      	movs	r2, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	401a      	ands	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1a      	ldr	r2, [r3, #32]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e046      	b.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a40:	d009      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a12      	ldr	r2, [pc, #72]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10c      	bne.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800

08002a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e03f      	b.n	8002b4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd ff72 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 faa7 	bl	8003054 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d140      	bne.n	8002bf2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Receive_IT+0x26>
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e039      	b.n	8002bf4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Receive_IT+0x38>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e032      	b.n	8002bf4 <HAL_UART_Receive_IT+0x9e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2222      	movs	r2, #34	; 0x22
 8002bb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bcc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_UART_IRQHandler+0x52>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f982 	bl	8002f54 <UART_Receive_IT>
      return;
 8002c50:	e0d0      	b.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80b0 	beq.w	8002dba <HAL_UART_IRQHandler+0x1ba>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_UART_IRQHandler+0x70>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80a5 	beq.w	8002dba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_UART_IRQHandler+0x90>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_UART_IRQHandler+0xb0>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	f043 0202 	orr.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xd0>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00f      	beq.n	8002cfa <HAL_UART_IRQHandler+0xfa>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_UART_IRQHandler+0xee>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	f043 0208 	orr.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d077      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_UART_IRQHandler+0x11c>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f91c 	bl	8002f54 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <HAL_UART_IRQHandler+0x144>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d031      	beq.n	8002da8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f86d 	bl	8002e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d023      	beq.n	8002da0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <HAL_UART_IRQHandler+0x1fc>)
 8002d76:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f875 	bl	8000e6c <HAL_DMA_Abort_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d92:	4610      	mov	r0, r2
 8002d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d96:	e00e      	b.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f83a 	bl	8002e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9e:	e00a      	b.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f836 	bl	8002e12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da6:	e006      	b.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f832 	bl	8002e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002db4:	e01d      	b.n	8002df2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db6:	bf00      	nop
    return;
 8002db8:	e01b      	b.n	8002df2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1d6>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f859 	bl	8002e86 <UART_Transmit_IT>
    return;
 8002dd4:	e00e      	b.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f89a 	bl	8002f24 <UART_EndTransmit_IT>
    return;
 8002df0:	e000      	b.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002df2:	bf00      	nop
  }
}
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	08002e5f 	.word	0x08002e5f

08002e00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ffca 	bl	8002e12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b21      	cmp	r3, #33	; 0x21
 8002e98:	d13e      	bne.n	8002f18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea2:	d114      	bne.n	8002ece <UART_Transmit_IT+0x48>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d110      	bne.n	8002ece <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	1c9a      	adds	r2, r3, #2
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	621a      	str	r2, [r3, #32]
 8002ecc:	e008      	b.n	8002ee0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	1c59      	adds	r1, r3, #1
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6211      	str	r1, [r2, #32]
 8002ed8:	781a      	ldrb	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	4619      	mov	r1, r3
 8002eee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	e000      	b.n	8002f1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
  }
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff5b 	bl	8002e00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b22      	cmp	r3, #34	; 0x22
 8002f66:	d170      	bne.n	800304a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d117      	bne.n	8002fa2 <UART_Receive_IT+0x4e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d113      	bne.n	8002fa2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa0:	e026      	b.n	8002ff0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d007      	beq.n	8002fc6 <UART_Receive_IT+0x72>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <UART_Receive_IT+0x80>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e008      	b.n	8002fe6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003000:	2b00      	cmp	r3, #0
 8003002:	d120      	bne.n	8003046 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0220 	bic.w	r2, r2, #32
 8003012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7fd fc0f 	bl	8000860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e002      	b.n	800304c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800308e:	f023 030c 	bic.w	r3, r3, #12
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	430b      	orrs	r3, r1
 800309a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <UART_SetConfig+0x114>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d103      	bne.n	80030c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030bc:	f7fe fcd0 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	e002      	b.n	80030ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030c4:	f7fe fcb8 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 80030c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009a      	lsls	r2, r3, #2
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <UART_SetConfig+0x118>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	0119      	lsls	r1, r3, #4
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	441a      	add	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003100:	4b1a      	ldr	r3, [pc, #104]	; (800316c <UART_SetConfig+0x118>)
 8003102:	fba3 0302 	umull	r0, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2064      	movs	r0, #100	; 0x64
 800310a:	fb00 f303 	mul.w	r3, r0, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	3332      	adds	r3, #50	; 0x32
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <UART_SetConfig+0x118>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003120:	4419      	add	r1, r3
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009a      	lsls	r2, r3, #2
 800312c:	441a      	add	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fbb2 f2f3 	udiv	r2, r2, r3
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <UART_SetConfig+0x118>)
 800313a:	fba3 0302 	umull	r0, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2064      	movs	r0, #100	; 0x64
 8003142:	fb00 f303 	mul.w	r3, r0, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	3332      	adds	r3, #50	; 0x32
 800314c:	4a07      	ldr	r2, [pc, #28]	; (800316c <UART_SetConfig+0x118>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	f003 020f 	and.w	r2, r3, #15
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	440a      	add	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40013800 	.word	0x40013800
 800316c:	51eb851f 	.word	0x51eb851f

08003170 <__libc_init_array>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	2600      	movs	r6, #0
 8003174:	4d0c      	ldr	r5, [pc, #48]	; (80031a8 <__libc_init_array+0x38>)
 8003176:	4c0d      	ldr	r4, [pc, #52]	; (80031ac <__libc_init_array+0x3c>)
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	42a6      	cmp	r6, r4
 800317e:	d109      	bne.n	8003194 <__libc_init_array+0x24>
 8003180:	f000 f822 	bl	80031c8 <_init>
 8003184:	2600      	movs	r6, #0
 8003186:	4d0a      	ldr	r5, [pc, #40]	; (80031b0 <__libc_init_array+0x40>)
 8003188:	4c0a      	ldr	r4, [pc, #40]	; (80031b4 <__libc_init_array+0x44>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	42a6      	cmp	r6, r4
 8003190:	d105      	bne.n	800319e <__libc_init_array+0x2e>
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	f855 3b04 	ldr.w	r3, [r5], #4
 8003198:	4798      	blx	r3
 800319a:	3601      	adds	r6, #1
 800319c:	e7ee      	b.n	800317c <__libc_init_array+0xc>
 800319e:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a2:	4798      	blx	r3
 80031a4:	3601      	adds	r6, #1
 80031a6:	e7f2      	b.n	800318e <__libc_init_array+0x1e>
 80031a8:	08003208 	.word	0x08003208
 80031ac:	08003208 	.word	0x08003208
 80031b0:	08003208 	.word	0x08003208
 80031b4:	0800320c 	.word	0x0800320c

080031b8 <memset>:
 80031b8:	4603      	mov	r3, r0
 80031ba:	4402      	add	r2, r0
 80031bc:	4293      	cmp	r3, r2
 80031be:	d100      	bne.n	80031c2 <memset+0xa>
 80031c0:	4770      	bx	lr
 80031c2:	f803 1b01 	strb.w	r1, [r3], #1
 80031c6:	e7f9      	b.n	80031bc <memset+0x4>

080031c8 <_init>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	bf00      	nop
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr

080031d4 <_fini>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr
